{"version":3,"sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Wrapper/Wrapper.styled.jsx","components/Wrapper/Wrapper.jsx","utils/getContactsFromJSON.js","App.jsx","index.js"],"names":["Form","styled","form","ContactForm","contacts","onSubmit","useState","name","setName","number","setNumber","useEffect","nameInputId","uuidv4","numberInputId","handleOnChange","e","target","value","autoComplete","htmlFor","id","type","pattern","title","required","onChange","List","ul","ContactList","onClick","map","Label","label","Filter","inputValue","inputId","Container","div","Wrapper","children","App","key","JSON","parse","localStorage","getItem","error","console","log","message","getContactsFromJSON","setContacts","filter","setFilter","setItem","stringify","contactsToRender","contact","toLowerCase","includes","unsuccessfulFiltering","length","contactsListIsEmpty","preventDefault","elements","find","toast","newContact","prev","newContactsList","dataset","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e51cbe3.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n  margin-bottom: 30px;\n  padding: 10px 15px;\n  border: 1px solid #000;\n  & label {\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: 5px;\n    margin-bottom: 15px;\n\n    & input {\n      width: 175px;\n      border: 1px solid grey;\n      border-radius: 2px;\n      outline: none;\n      transition: box-shaddow 200ms linear;\n\n      &:focus {\n        box-shadow: 0 0 2px 2px #87baf4;\n        border: 1px solid #87baf4;\n      }\n    }\n  }\n\n  & button {\n    margin-top: 10px;\n    width: max-content;\n    padding: 2px 15px;\n    font-weight: 700;\n    border: 1px solid lightgray;\n    border-radius: 5px;\n    background-color: transparent;\n    cursor: pointer;\n\n    &:hover,\n    &:focus {\n      background-image: linear-gradient(\n        to top,\n        rgba(67, 109, 216, 1) 50%,\n        rgba(94, 152, 247, 1) 100%\n      );\n      border-color: transparent;\n    }\n  }\n`;\n\nexport { Form };\n","import { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport { Form } from './ContactForm.styled';\n\nconst ContactForm = ({ contacts, onSubmit }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  useEffect(() => {\n    setName('');\n    setNumber('');\n  }, [contacts]);\n\n  const nameInputId = uuidv4();\n  const numberInputId = uuidv4();\n\n  const handleOnChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        return setName(e.target.value);\n      case 'number':\n        return setNumber(e.target.value);\n      default:\n        return;\n    }\n  };\n\n  return (\n    <Form autoComplete={'off'} onSubmit={onSubmit}>\n      <label htmlFor={nameInputId}>\n        Name\n        <input\n          id={nameInputId}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handleOnChange}\n        />\n      </label>\n      <label htmlFor={numberInputId}>\n        Number\n        <input\n          id={numberInputId}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handleOnChange}\n        />\n      </label>\n      <button type={'submit'}>Add contact</button>\n    </Form>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      number: PropTypes.string,\n      id: PropTypes.string,\n    }),\n  ),\n};\n\nexport { ContactForm };\n","import styled from '@emotion/styled';\n\nconst List = styled.ul`\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 5px;\n\n  & button {\n    margin-left: 10px;\n    width: max-content;\n    padding: 2px 15px;\n    font-size: 12px;\n    font-weight: 700;\n    border: 1px solid lightgray;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: transparent;\n\n    &:hover,\n    &:focus {\n      background-image: linear-gradient(\n        to top,\n        rgba(67, 109, 216, 1) 50%,\n        rgba(94, 152, 247, 1) 100%\n      );\n      border-color: transparent;\n    }\n  }\n`;\n\nexport { List };\n","import PropTypes from 'prop-types';\nimport { List } from './ContactList.styled';\n\nfunction ContactList({ contacts, onClick }) {\n  return (\n    <List>\n      {contacts.map(({ name, number }) => {\n        return (\n          <li key={name}>\n            {name}: {number}\n            <button type={'button'} data-name={name} onClick={onClick}>\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </List>\n  );\n}\n\nexport { ContactList };\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ),\n  onClick: PropTypes.func,\n};\n","import styled from '@emotion/styled';\n\nconst Label = styled.label`\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 5px;\n\n  & input {\n    width: 175px;\n    border: 1px solid grey;\n    border-radius: 2px;\n    outline: none;\n    transition: box-shaddow 200ms linear;\n\n    &:focus {\n      border: 1px solid #87baf4;\n      box-shadow: 0 0 2px 2px #87baf4;\n    }\n  }\n`;\n\nexport { Label };\n","import { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport { Label } from './Filter.styled';\n\nfunction Filter({ inputValue, onChange }) {\n  const inputId = uuidv4();\n  return (\n    <Label htmlFor=\"inputId\">\n      Find contacts by name\n      <input id={inputId} type=\"text\" value={inputValue} onChange={onChange} />\n    </Label>\n  );\n}\n\nFilter.propTypes = {\n  inputValue: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport { Filter };\n","import styled from '@emotion/styled';\n\nconst Container = styled.div`\n  padding: 20px 100px;\n`;\n\nexport { Container };\n","import PropTypes from 'prop-types';\nimport { Container } from './Wrapper.styled';\n\nfunction Wrapper({ children }) {\n  return <Container>{children}</Container>;\n}\n\nWrapper.propTypes = {\n  children: PropTypes.node,\n};\n\nexport { Wrapper };\n","const getContactsFromJSON = key => {\n  try {\n    return JSON.parse(localStorage.getItem(key)) ?? [];\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport { getContactsFromJSON };\n","import { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { ContactForm } from './components/ContactForm/ContactForm';\nimport { ContactList } from './components/ContactList/ContactList';\nimport { Filter } from './components/Filter/Filter';\nimport { Wrapper } from 'components/Wrapper/Wrapper';\nimport { getContactsFromJSON } from './utils/getContactsFromJSON';\n\nconst App = () => {\n  const [contacts, setContacts] = useState(() =>\n    getContactsFromJSON('contacts'),\n  );\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const handleOnSubmit = e => {\n    e.preventDefault();\n    const name = e.target.elements.name.value;\n    const number = e.target.elements.number.value;\n\n    const isContactExisting = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n    if (isContactExisting) {\n      toast.error(`${name} is already in contacts.`);\n      return;\n    }\n\n    const newContact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n    setContacts(prev => [...prev, newContact]);\n  };\n\n  const handleOnClickDelete = e => {\n    const newContactsList = contacts.filter(contact => {\n      return contact.name !== e.target.dataset.name;\n    });\n    setContacts(newContactsList);\n  };\n\n  const handleFilterInput = e => {\n    const value = e.target.value;\n    setFilter(value);\n  };\n\n  const contactsToRender = !filter\n    ? contacts\n    : contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase()),\n      );\n\n  const unsuccessfulFiltering = filter && contactsToRender.length === 0;\n  const contactsListIsEmpty = !filter && contactsToRender.length === 0;\n\n  return (\n    <Wrapper>\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={handleOnSubmit} contacts={contacts} />\n      <h2>Contacts</h2>\n      <Filter inputValue={filter} onChange={handleFilterInput} />\n      <ContactList contacts={contactsToRender} onClick={handleOnClickDelete} />\n      {unsuccessfulFiltering && <p>There are no contacts with this name.</p>}\n      {contactsListIsEmpty && <p>There are no contacts here.</p>}\n      <Toaster />\n    </Wrapper>\n  );\n};\n\nexport { App };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}