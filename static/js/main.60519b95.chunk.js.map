{"version":3,"sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Wrapper/Wrapper.styled.jsx","components/Wrapper/Wrapper.jsx","App.jsx","index.js"],"names":["Form","styled","form","ContactForm","state","name","number","nameInputId","uuidv4","numberInputId","handleOnChange","e","setState","target","value","prevProps","contacts","this","props","autoComplete","onSubmit","htmlFor","id","type","pattern","title","required","onChange","Component","List","ul","ContactList","onClick","map","Label","label","Filter","inputValue","inputId","Container","div","Wrapper","children","App","filter","handleOnSubmit","preventDefault","elements","find","contact","toLowerCase","toast","error","newContact","prevState","handleOnClickDelete","newContactsList","dataset","handleFilterInput","JSON","parse","localStorage","getItem","console","log","message","_","length","setItem","stringify","contactsToRender","includes","unsuccessfulFiltering","contactsListIsEmpty","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60519b95.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n  margin-bottom: 30px;\n  padding: 10px 15px;\n  border: 1px solid #000;\n  & label {\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: 5px;\n    margin-bottom: 15px;\n\n    & input {\n      width: 175px;\n      border: 1px solid grey;\n      border-radius: 2px;\n      outline: none;\n      transition: box-shaddow 200ms linear;\n\n      &:focus {\n        box-shadow: 0 0 2px 2px #87baf4;\n        border: 1px solid #87baf4;\n      }\n    }\n  }\n\n  & button {\n    margin-top: 10px;\n    width: max-content;\n    padding: 2px 15px;\n    font-weight: 700;\n    border: 1px solid lightgray;\n    border-radius: 5px;\n    background-color: transparent;\n    cursor: pointer;\n\n    &:hover,\n    &:focus {\n      background-image: linear-gradient(\n        to top,\n        rgba(67, 109, 216, 1) 50%,\n        rgba(94, 152, 247, 1) 100%\n      );\n      border-color: transparent;\n    }\n  }\n`;\n\nexport { Form };\n","import { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport { Form } from './ContactForm.styled';\n\nclass ContactForm extends Component {\n  componentDidUpdate(prevProps) {\n    if (prevProps.contacts !== this.props.contacts) {\n      this.setState({\n        name: '',\n        number: '',\n      });\n    }\n  }\n\n  static propTypes = {\n    onSubmit: PropTypes.func,\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        number: PropTypes.string,\n        id: PropTypes.string,\n      }),\n    ),\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = uuidv4();\n  numberInputId = uuidv4();\n\n  handleOnChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  render() {\n    return (\n      <Form autoComplete={'off'} onSubmit={this.props.onSubmit}>\n        <label htmlFor={this.nameInputId}>\n          Name\n          <input\n            id={this.nameInputId}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={this.state.name}\n            onChange={this.handleOnChange}\n          />\n        </label>\n        <label htmlFor={this.numberInputId}>\n          Number\n          <input\n            id={this.numberInputId}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={this.state.number}\n            onChange={this.handleOnChange}\n          />\n        </label>\n        <button type={'submit'}>Add contact</button>\n      </Form>\n    );\n  }\n}\n\nexport { ContactForm };\n","import styled from '@emotion/styled';\n\nconst List = styled.ul`\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 5px;\n\n  & button {\n    margin-left: 10px;\n    width: max-content;\n    padding: 2px 15px;\n    font-size: 12px;\n    font-weight: 700;\n    border: 1px solid lightgray;\n    border-radius: 5px;\n    cursor: pointer;\n    background-color: transparent;\n\n    &:hover,\n    &:focus {\n      background-image: linear-gradient(\n        to top,\n        rgba(67, 109, 216, 1) 50%,\n        rgba(94, 152, 247, 1) 100%\n      );\n      border-color: transparent;\n    }\n  }\n`;\n\nexport { List };\n","import PropTypes from 'prop-types';\nimport { List } from './ContactList.styled';\n\nfunction ContactList({ contacts, onClick }) {\n  return (\n    <List>\n      {contacts.map(({ name, number }) => {\n        return (\n          <li key={name}>\n            {name}: {number}\n            <button type={'button'} data-name={name} onClick={onClick}>\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </List>\n  );\n}\n\nexport { ContactList };\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ),\n  onClick: PropTypes.func,\n};\n","import styled from '@emotion/styled';\n\nconst Label = styled.label`\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 5px;\n\n  & input {\n    width: 175px;\n    border: 1px solid grey;\n    border-radius: 2px;\n    outline: none;\n    transition: box-shaddow 200ms linear;\n\n    &:focus {\n      border: 1px solid #87baf4;\n      box-shadow: 0 0 2px 2px #87baf4;\n    }\n  }\n`;\n\nexport { Label };\n","import { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport { Label } from './Filter.styled';\n\nfunction Filter({ inputValue, onChange }) {\n  const inputId = uuidv4();\n  return (\n    <Label htmlFor=\"inputId\">\n      Find contacts by name\n      <input id={inputId} type=\"text\" value={inputValue} onChange={onChange} />\n    </Label>\n  );\n}\n\nFilter.propTypes = {\n  inputValue: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport { Filter };\n","import styled from '@emotion/styled';\n\nconst Container = styled.div`\n  padding: 20px 100px;\n`;\n\nexport { Container };\n","import PropTypes from 'prop-types';\nimport { Container } from './Wrapper.styled';\n\nfunction Wrapper({ children }) {\n  return <Container>{children}</Container>;\n}\n\nWrapper.propTypes = {\n  children: PropTypes.node,\n};\n\nexport { Wrapper };\n","import { v4 as uuidv4 } from 'uuid';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { Component } from 'react';\nimport { ContactForm } from './components/ContactForm/ContactForm';\nimport { ContactList } from './components/ContactList/ContactList';\nimport { Filter } from './components/Filter/Filter';\nimport { Wrapper } from 'components/Wrapper/Wrapper';\n\nclass App extends Component {\n  componentDidMount() {\n    try {\n      const contacts = JSON.parse(localStorage.getItem('contacts')) || [];\n      this.setState({ contacts });\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n  componentDidUpdate(_, prevState) {\n    if (\n      prevState.contacts.length !== 0 &&\n      prevState.contacts !== this.state.contacts\n    ) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  handleOnSubmit = e => {\n    e.preventDefault();\n    const name = e.target.elements.name.value;\n    const number = e.target.elements.number.value;\n\n    const isContactExisting = this.state.contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n    if (isContactExisting) {\n      toast.error(`${name} is already in contacts.`);\n      // alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    const newContact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n    this.setState(prevState => ({\n      contacts: [...prevState.contacts, newContact],\n    }));\n  };\n\n  handleOnClickDelete = e => {\n    const newContactsList = this.state.contacts.filter(contact => {\n      return contact.name !== e.target.dataset.name;\n    });\n    this.setState({ contacts: newContactsList });\n  };\n\n  handleFilterInput = e => {\n    const value = e.target.value;\n    this.setState({ filter: value });\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n    const { handleOnSubmit, handleFilterInput, handleOnClickDelete } = this;\n\n    const contactsToRender = !filter\n      ? contacts\n      : contacts.filter(contact =>\n          contact.name.toLowerCase().includes(filter.toLowerCase()),\n        );\n\n    const unsuccessfulFiltering = filter && contactsToRender.length === 0;\n    const contactsListIsEmpty = !filter && contactsToRender.length === 0;\n\n    return (\n      <Wrapper>\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={handleOnSubmit} contacts={contacts} />\n        <h2>Contacts</h2>\n        <Filter inputValue={filter} onChange={handleFilterInput} />\n        <ContactList\n          contacts={contactsToRender}\n          onClick={handleOnClickDelete}\n        />\n        {unsuccessfulFiltering && <p>There are no contacts with this name.</p>}\n        {contactsListIsEmpty && <p>There are no contacts here.</p>}\n        <Toaster />\n      </Wrapper>\n    );\n  }\n}\n\nexport { App };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}